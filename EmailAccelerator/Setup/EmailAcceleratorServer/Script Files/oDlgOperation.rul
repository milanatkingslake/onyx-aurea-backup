
 /*=======================================================================*/
 /*                                                                       */
 /*   File    : ODlgOperation.rul                                         */
 /*                                                                       */
 /*   Purpose : This file contains the code for the ODlgOperation         */
 /*             script dialog function.                                   */
 /*                                                                       */
 /*=======================================================================*/

 /*------------------------------------------------------------------------*/
 /*                                                                        */
 /*   Function: ODlgOperation                                              */
 /*                                                                        */
 /*   Descrip:  This dialog will allow the user to choose different parts  */
 /*             of the software to install.                                */
 /*   Misc:                                                                */
 /*                                                                        */
 /*------------------------------------------------------------------------*/
function ODlgOperation(szMedia, szTitle, szMsg1, szMsg2, szDialogId, szComponents, szComponentResult)
          STRING  szDlg, svComponent, szTemp;
          INT     nId, nReturn, nCount, nCheck, nTemp, nSubList;
          LIST    listComponents;
          HWND    hwndDlg;
          BOOL    bDone;
          NUMBER  nExclusiveFlag;
        begin

          nExclusiveFlag = TRUE;  //use radio buttons.

          szDlg     = SD_DLG_ASKOPTIONS;
          nSdDialog = SD_NDLG_ASKOPTIONS;

          // Check to see if user has a custom dialog, based on SdAskOptions
          // if it is, modify nSdDialog to store ID of that dialog
          if( szDialogId != "" ) then
               if( StrToNum( nSdDialog, szDialogId ) < 0 ) then
                   return -1;      // ONLY numeric Dialog ID of custom dialog
                                   // supported
               endif;
          endif;

          // record data produced by this dialog
          if (MODE=SILENTMODE) then
            SdMakeName( szAppKey, szDlg, szTitle, nSdAskOptions );
            SilentReadData( szAppKey, "Result", DATA_NUMBER, szTemp, nId );
            if ((nId != BACK) && (nId != CANCEL)) then
               SilentReadData( szAppKey, "Component", DATA_COMPONENT, szComponents, nTemp );
            endif;

            return nId;
          endif;

//r       if(ORecoveryEvaluation("ODialogShowOperations"))then
//r	    	ORecoveryGetString("","LastOperationChosen",szComponentResult);
//r     		return NEXT;
//r    	  endif;

          // ensure general initialization is complete
          if ( !bSdInit ) then
             SdInit( );
          endif;

          if (EzDefineDialog( szDlg, "", szDialogId, nSdDialog ) = DLG_ERR) then
             return -1;
          endif;


          // Loop in dialog until the user selects a standard button
          bDone = FALSE;
          while (!bDone)

             nId = WaitOnDialog( szDlg );

             switch (nId)
             case DLG_INIT:

                  hwndDlg = CmdGetHwndDlg( szDlg );

                  // Set the correct check boxes if necessary.
                  if( nExclusiveFlag = EXCLUSIVE) then
                     SdOptionSetState( hwndDlg, SD_CHECK1 );
                  endif;

                  nSubList = OHlpOptionInit(szMedia, szComponents, SD_CHECK1, szDlg, nExclusiveFlag, hwndDlg, szComponentResult);

                  if(nSubList)then
                  		//change message to indicate only a sub list of items are available.
                  		szMsg1 = @PROMPT_LIST1_OPERATION;
                  		szMsg2 = @PROMPT_LIST2_OPERATION;
						//look for override message in component IDE media
						szTemp="";
                  		ComponentGetData(szMedia,szComponents,COMPONENT_FIELD_DISPLAYNAME,nTemp,szTemp);
                  		if(szTemp != "")then
                  			szMsg1 = szTemp;
                  			szMsg2 = "";
                  		endif;
	              endif;

                  if(szTitle != "") then
    					SetWindowText(hwndDlg, szTitle);
                  endif;

                  if(szMsg1 != "") then
	                 	SdSetStatic(szDlg, SD_STA_MSG1, szMsg1);
                  endif;

                  if(szMsg2 != "") then
                        SdSetStatic(szDlg, SD_STA_MSG2, szMsg2);
                  endif;

                  SdGeneralInit( szDlg, hwndDlg, STYLE_BOLD, szSdProduct );

             case SD_PBUT_OK:

                  listComponents = ListCreate( STRINGLIST );
                  ComponentListItems( szMedia, szComponents, listComponents );

                  nReturn = ListSetIndex( listComponents, LISTFIRST );
                  nCount = 0;
                  while( nReturn != END_OF_LIST )
                      ListCurrentString( listComponents, svComponent );
                      if (ComponentIsItemSelected(szMedia, svComponent) == TRUE) then
                         //ComponentSelectItem( MEDIA, svComponent, FALSE );

                         nCheck = CtrlGetState( szDlg, SD_CHECK1+nCount );
                         if( nCheck = BUTTON_CHECKED ) then
                             //ComponentSelectItem( MEDIA, svComponent, TRUE );
                             szComponentResult = svComponent;
                         endif;
                      endif;

                      nReturn = ListSetIndex( listComponents, LISTNEXT );
                      nCount = nCount + 1;
                  endwhile;

                  ListDestroy( listComponents );

                  nId   = OK;
                  bDone = TRUE;

             case BACK:
                   nId    = BACK;
                   bDone  = TRUE;

             case DLG_ERR:
                  SdError( -1, "SdAskOptions" );
                  nId   = -1;
                  bDone = TRUE;

             case DLG_CLOSE:
                  SdCloseDlg( hwndDlg, nId, bDone );

             default:
                  // check standard handling
                  if (SdIsStdButton( nId ) && SdDoStdButton( nId )) then
                      bDone = TRUE;
                  endif;
             endswitch;

          endwhile;

          EndDialog( szDlg );
          ReleaseDialog( szDlg );

          SdUnInit( );

          // record data produced by this dialog
          SdMakeName( szAppKey, szDlg, szTitle, nSdAskOptions );
          SilentWriteData( szAppKey, "Component", DATA_COMPONENT, szComponents, nTemp );
          SilentWriteData( szAppKey, "Result", DATA_NUMBER, "", nId );

//r          ORecoveryStoreString("","LastOperationChosen",szComponentResult,nId);

          return nId;

        end;

 /*------------------------------------------------------------------------*/
 /*                                                                        */
 /*   Function: SdOptionSetState                                           */
 /*                                                                        */
 /*   Descrip:  This funciton set the check boxes or radio button in       */
 /*             SdAskOptions dialog.                                       */
 /*   Misc:                                                                */
 /*                                                                        */
 /*------------------------------------------------------------------------*/
function SdOptionSetState( hwndDlg, nControlID )
          NUMBER nCount;
          HWND   hwndStatic;
        begin

           nCount = 0;

           hwndStatic = GetDlgItem(hwndDlg, nControlID+nCount);

           while( hwndStatic > 0 )
              if( bInstall16 = TRUE ) then
                  SendMessage( hwndStatic, WM_SETSTYLE, BS_AUTORADIOBUTTON, TRUE );
              else
                  SendMessage( hwndStatic, WM_SETSTYLE_32, BS_AUTORADIOBUTTON, TRUE );
              endif;
              nCount = nCount + 1;
              hwndStatic = GetDlgItem(hwndDlg, nControlID+nCount);
           endwhile;

        end;

/*------------------------------------------------------------------------*/
/*                                                                        */
/*   Function: SdOptionInit                                               */
/*                                                                        */
/*   Descrip:  This funciton initializes check boxes or radio button in   */
/*             SdAskOptions dialog.                                       */
/*   Misc:                                                                */
/*                                                                        */
/*------------------------------------------------------------------------*/
function OHlpOptionInit( szMedia, szComponents, nControlID, szDlg, nExclusiveFlag, hwndDlg ,szOperation )
          STRING  svComponent[ MAX_STRING ];
//          STRING  szOperation;
          NUMBER  nCount, nReturn;
          HWND    hwndStatic;
          LIST    listComponents;
          BOOL    bSet;
          STRING  szComponentDisplayName,szMisc;
          NUMBER  nUnused,nSubList;
        begin

//           bSet = FALSE;
//           szOperation = "All"; //default to display all operations.

          // Determine operation based on operation data in media
          // uses g_structSetupMode and g_structSystemData
//temp          _DetermineSetupType(szMedia,szComponents,szOperation);
          if(szOperation != "All")then
          		//specific items only to list.  Change message.
        		nSubList = TRUE;
          endif;

           listComponents = ListCreate( STRINGLIST );
           ComponentListItems( szMedia, szComponents, listComponents );

           nReturn = ListSetIndex( listComponents, LISTFIRST );
           nCount = 0;
           while( nReturn != END_OF_LIST )
               ListCurrentString( listComponents, svComponent );
               ComponentGetData( szMedia, svComponent, COMPONENT_FIELD_DISPLAYNAME, nUnused, szComponentDisplayName);
               hwndStatic = GetDlgItem(hwndDlg, nControlID+nCount);
               if( hwndStatic ) then
                    if(ComponentIsItemSelected( szMedia, svComponent)) then
						
						//select operation component.
						
                        CtrlSetText( szDlg, nControlID+nCount, szComponentDisplayName );
						
						if( nExclusiveFlag = TRUE ) then
                            if((svComponent % szOperation))then
                            	bSet = TRUE;
                            endif;
                        else
                        	bSet = TRUE;
                        endif;

                       	// if first one then set as focus
                       	if (bSet = TRUE) then
                            CtrlSetState( szDlg, nControlID+nCount, BUTTON_CHECKED );
                           	SetFocus( hwndStatic );
                           	bSet = FALSE;
                       	else
                       		if(nExclusiveFlag = TRUE)then
	                            //only if not operation2
//	                            if((svComponent = COMP_OPERATION_OPERATION3)&&(szOperation = COMP_OPERATION_OPERATION2))then
//	                            if((svComponent = COMP_OPERATION_OPERATION2)&&(szOperation = COMP_OPERATION_OPERATION3))then
	                            if((svComponent = COMP_OPERATION_OPERATION3)&&(szOperation = COMP_OPERATION_OPERATION4))then
	                            else
                            		_WinSubEnableWindow ( hwndStatic, 0 );  //gray out other buttons
    							endif;
    						endif;
						endif;

                       	nCount = nCount + 1;
                 		
                 		                 		
/*						//old functionalty ---JCG
						if((svComponent % szOperation) || (szOperation = "All"))then
                        	CtrlSetText( szDlg, nControlID+nCount, szComponentDisplayName );
					
                        	if( nExclusiveFlag = EXCLUSIVE ) then
                            	if( bSet = FALSE ) then
                                	CtrlSetState( szDlg, nControlID+nCount, BUTTON_CHECKED );
                            	endif;
                        	else
                            	CtrlSetState( szDlg, nControlID+nCount, BUTTON_CHECKED );
                        	endif;

                        	// if first one then set as focus
                        	if (bSet = FALSE) then
                            	SetFocus( hwndStatic );
                        	endif;

                        	bSet = TRUE;

                        	nCount = nCount + 1;
                 		endif;
*/
                   endif;
               endif;

               nReturn = ListSetIndex( listComponents, LISTNEXT );

           endwhile;

           ListDestroy( listComponents );

           // Hide rest of the controls, if there are any
           hwndStatic = GetDlgItem(hwndDlg, nControlID+nCount);
           while ( hwndStatic )
               ShowWindow( hwndStatic, WM_HIDE );
               nCount = nCount + 1;
               hwndStatic = GetDlgItem(hwndDlg, nControlID+nCount);
           endwhile;
			
		return nSubList;

        end;











