<!-- Copyright Aptean 2017. All rights reserved. -->
<rules xmlns="http://www.consonacrm.com/brm"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.consonacrm.com/brm ../../grammar/onyx/businessRuleManager.grammar.onyx.xsd">
	<rule description ="Retrieve the individual if this is the evaluateIndividual method">
		<if>
			<test>
				<stringEqualTo>
					<left>
						<literal>evaluateIndividual</literal>
					</left>
					<right>
						<stepAdditionalData>
							<name>
								<literal>stepMethod</literal>
							</name>
						</stepAdditionalData>
					</right>
				</stringEqualTo>
			</test>
			<then>
				<otmCall description="Call individual.retrieve">
					<object>
						<literal>individual</literal>
					</object>
					<method>
						<literal>retrieve</literal>
					</method>
					<inputParameters description="Add parameters for individual retrieve">
						<fieldMap>
							<source>
								<literal>/stepPackage/parameters</literal>
							</source>
							<target>
								<literal>.</literal>
							</target>
						</fieldMap>
					</inputParameters>
					<outputParameters description="Save individual object in parameters">
						<fieldMap>
							<source>
								<literal>individual</literal>
							</source>
							<target>
								<literal>/stepPackage/parameters/individual</literal>
							</target>
						</fieldMap>
					</outputParameters>
					<onError>stop</onError>
				</otmCall>
				<!--<saveXML mode="development" description="Save XML node contents to file">
					<name>
						<literal>c:\temp\individualLoggingEvaluateIndividual.xml</literal>
					</name>
					<path>
						<literal>/stepPackage</literal>
					</path>
				</saveXML>-->
			</then>
		</if>
	</rule>
	<rule description="Retrieve Property List for individual">
		<!-- helper nodes -->
		<addNode>
			<path>
				<literal>/stepPackage/parameters</literal>
			</path>
			<name>
				<literal>_helpers</literal>
			</name>
		</addNode>
		<addNode>
			<path>
				<literal>/stepPackage/parameters/_helpers</literal>
			</path>
			<name>
				<literal>propertyList</literal>
			</name>
			<value>
				<concatenate>
					<rootPath/>
					<literal>\metadata\assignmentManager\properties.individual.xml</literal>
				</concatenate>
			</value>
		</addNode>
		<usePath>
			<path>
				<literal>/stepPackage/parameters/_helpers/propertyList</literal>
			</path>
			<rules>
				<subProcess>
					<name>
						<literal>assignmentManager\properties.cache.xml</literal>
					</name>
				</subProcess>
			</rules>
		</usePath>
	</rule>
	<rule description="Retrieve conditions for individual and store in the _helpers node">
		<addNode>
			<path>
				<literal>/stepPackage/parameters/_helpers</literal>
			</path>
			<name>
				<literal>assignmentExpressionRetrieveList</literal>
			</name>
			<value>
				<concatenate>
					<rootPath/>
					<literal>\metadata\assignmentManager\parameters.assignmentExpression.retrieveListByIndividual.xml</literal>
				</concatenate>
			</value>
		</addNode>
		<usePath>
			<path>
				<literal>/stepPackage/parameters/_helpers/assignmentExpressionRetrieveList</literal>
			</path>
			<rules>
				<subProcess>
					<name>
						<literal>assignmentManager\properties.cache.xml</literal>
					</name>
				</subProcess>
				<forEach>
					<path>
						<literal>/stepPackage/parameters/_helpers/assignmentExpressionRetrieveList/parameters/*</literal>
					</path>
					<rules>
						<setNodeValue>
							<path>
								<literal>.</literal>
							</path>
							<value>
								<getNodeValue>
									<concatenate>
										<literal>/stepPackage/parameters/</literal>
										<getNodeValue>
											<concatenate>
												<literal>/stepPackage/parameters/_helpers/propertyList/properties/property[@name='</literal>
												<getNodeName>
													<literal>.</literal>
												</getNodeName>
												<literal>']/@path</literal>
											</concatenate>
										</getNodeValue>
									</concatenate>
								</getNodeValue>
							</value>
						</setNodeValue>
					</rules>
				</forEach>
				<otmCall description="Call assignmentExpression.retrieveListByIndividual to get rules to process">
					<object>
						<literal>assignmentExpression</literal>
					</object>
					<method>
						<literal>retrieveListByIndividual</literal>
					</method>
					<inputParameters>
						<fieldMap>
							<source>
								<literal>/stepPackage/parameters/_helpers/assignmentExpressionRetrieveList/parameters</literal>
							</source>
							<target>
								<literal>.</literal>
							</target>
						</fieldMap>
					</inputParameters>
					<outputParameters description="Save return values from rowSet object">
						<fieldMap description="Save ownerType">
							<source>
								<literal>rowSet</literal>
							</source>
							<target>
								<literal>/stepPackage/parameters/_helpers/assignmentExpressionResults</literal>
							</target>
						</fieldMap>
					</outputParameters>
					<onError>stop</onError>
				</otmCall>
			</rules>
		</usePath>
		<!--<saveXML mode="development" description="Save XML node contents to file">
			<name>
				<literal>c:\temp\individualLoggingRetrieveRules.xml</literal>
			</name>
			<path>
				<literal>/stepPackage</literal>
			</path>
		</saveXML>-->
	</rule>
	<rule description="Evaluate conditions to find the first true condition">
		<addNode description="Add currentConditionId">
			<path>
				<literal>/stepPackage/parameters/_helpers/assignmentExpressionResults</literal>
			</path>
			<name>
				<literal>currentConditionId</literal>
			</name>
		</addNode>
		<forEach description="For each conditionId (c1)">
			<path>
				<literal>/stepPackage/parameters/_helpers/assignmentExpressionResults/rows/row[not(preceding-sibling::*) or preceding-sibling::*[1]/c1!=c1]/c1</literal>
			</path>
			<rules>
				<rule description="Save the current condition Id">
					<setNodeValue>
						<path>
							<literal>/stepPackage/parameters/_helpers/assignmentExpressionResults/currentConditionId</literal>
						</path>
						<value>
							<getNodeValue>
								<literal>../c1</literal>
							</getNodeValue>
						</value>
					</setNodeValue>
				</rule>
				<forEach description="For each assignmentExpression with this conditionId">
					<!--Expression with this conditionId-->
					<path>
						<literal>/stepPackage/parameters/_helpers/assignmentExpressionResults/rows/row[c1=/stepPackage/parameters/_helpers/assignmentExpressionResults/currentConditionId]</literal>
					</path>
					<rules>
						<rule description="Add valueToCompare node and populate it with the correct property">
							<addNode description="Add conditionPriority">
								<path>
									<literal>.</literal>
								</path>
								<name>
									<literal>valueToCompare</literal>
								</name>
								<value>
									<getNodeValue>
										<concatenate>
											<literal>/stepPackage/parameters/</literal>
											<getNodeValue>
												<concatenate>
													<literal>/stepPackage/parameters/_helpers/propertyList/properties/property[@name='</literal>
													<getNodeValue>
														<literal>c2</literal>
													</getNodeValue>
													<literal>']/@path</literal>
												</concatenate>
											</getNodeValue>
										</concatenate>
									</getNodeValue>
								</value>
							</addNode>
						</rule>
						<rule description="Add valueDataType node and populate it with dataType of valueToCompare">
							<addNode description="Add valueDataType">
								<path>
									<literal>.</literal>
								</path>
								<name>
									<literal>valueDataType</literal>
								</name>
								<value>
									<getNodeValue>
										<concatenate>
											<literal>/stepPackage/parameters/_helpers/propertyList/properties/property[@name='</literal>
											<getNodeValue>
												<literal>c2</literal>
											</getNodeValue>
											<literal>']/@type</literal>
										</concatenate>
									</getNodeValue>
								</value>
							</addNode>
						</rule>
						<rule description=" Add expressionIsTrue node">
							<addNode description="Add expressionIsTrue">
								<path>
									<literal>.</literal>
								</path>
								<name>
									<literal>expressionIsTrue</literal>
								</name>
							</addNode>
						</rule>
						<rule description="Grab the appropriate operator, evaluate the expression and populate expressionIsTrue with true or false">
							<subProcess>
								<name>
									<literal>assignmentManager\evaluateExpressions.xml</literal>
								</name>
							</subProcess>
						</rule>
						<rule description=" Check if current rule is false and break out of the loop">
							<if>
								<test>
									<exists>
										<literal>expressionIsTrue[.=0]</literal>
									</exists>
								</test>
								<then>
									<loopBreak/>
								</then>
							</if>
						</rule>
					</rules>
				</forEach>
				<rule description="Create assignmentAssociation XML and any contact XML mappings if condition is true">
					<if>
						<test>
							<not>
								<exists>
									<literal>/stepPackage/parameters/_helpers/assignmentExpressionResults/rows/row[c1=/stepPackage/parameters/_helpers/assignmentExpressionResults/currentConditionId and expressionIsTrue='0']</literal>
								</exists>
							</not>
						</test>
						<then description="Condition is true">
							<rules>
								<rule description="Make assignmentCondition.retrieveCollection call">
									<otmCall>
										<object>
											<literal>assignmentCondition</literal>
										</object>
										<method>
											<literal>retrieveCollection</literal>
										</method>
										<inputParameters>
											<addNode>
												<path>
													<literal>.</literal>
												</path>
												<name>
													<literal>assignmentConditions</literal>
												</name>
											</addNode>
											<objectInstance description="create an instance of the assignmentCondition object">
												<name>
													<literal>assignmentCondition</literal>
												</name>
												<path>
													<literal>assignmentConditions</literal>
												</path>
											</objectInstance>
											<fieldMap>
												<source>
													<literal>/stepPackage/parameters/_helpers/assignmentExpressionResults/currentConditionId</literal>
												</source>
												<target>
													<literal>assignmentConditions/assignmentCondition/primaryId</literal>
												</target>
											</fieldMap>
										</inputParameters>
										<outputParameters description="Save return values from assignmentCondition object">
											<fieldMap description="Save assignmentCondition">
												<source>
													<literal>assignmentConditions</literal>
												</source>
												<target>
													<literal>/stepPackage/parameters/_helpers/assignmentConditionRetrieveResults</literal>
												</target>
											</fieldMap>
										</outputParameters>
										<onError>stop</onError>
									</otmCall>
								</rule>
								<rule description="Create assignmentAssociation.insertReplace XML">
									<addNode>
										<path>
											<literal>/stepPackage/parameters/_persist</literal>
										</path>
										<name>
											<literal>assignmentAssociationInsertReplace</literal>
										</name>
									</addNode>
									<objectInstance description="create an instance of the assignmentCondition object">
										<name>
											<literal>assignmentAssociation</literal>
										</name>
										<path>
											<literal>/stepPackage/parameters/_persist/assignmentAssociationInsertReplace</literal>
										</path>
									</objectInstance>
									<fieldMaps>
										<fieldMap>
											<source>
												<literal>/stepPackage/parameters/_helpers/assignmentConditionRetrieveResults/assignmentCondition[1]/territoryId</literal>
											</source>
											<target>
												<literal>/stepPackage/parameters/_persist/assignmentAssociationInsertReplace/assignmentAssociation/assignmentTerritoryId</literal>
											</target>
										</fieldMap>
									</fieldMaps>
									<setNodeValue>
										<path>
											<literal>/stepPackage/parameters/_persist/assignmentAssociationInsertReplace/assignmentAssociation/associatedWithType</literal>
										</path>
										<value>
											<literal>1</literal>
										</value>
									</setNodeValue>
								</rule>
								<rule description="If this is an insert, call assignmentSetUser.retrieveListByCondition, passing in current condition Id">
									<if>
										<test>
											<stringEqualTo>
												<left>
													<literal>insert</literal>
												</left>
												<right>
													<stepAdditionalData>
														<name>
															<literal>stepMethod</literal>
														</name>
													</stepAdditionalData>
												</right>
											</stringEqualTo>
										</test>
										<then>
											<otmCall>
												<object>
													<literal>assignmentSetUser</literal>
												</object>
												<method>
													<literal>retrieveListByCondition</literal>
												</method>
												<inputParameters>
													<fieldMap>
														<source>
															<literal>/stepPackage/parameters/_helpers/assignmentExpressionResults/currentConditionId</literal>
														</source>
														<target>
															<literal>conditionId</literal>
														</target>
													</fieldMap>
												</inputParameters>
												<outputParameters description="Save return values from assignmentSetUser object">
													<fieldMap description="Save assignmentSetUsers">
														<source>
															<literal>rowSet</literal>
														</source>
														<target>
															<literal>/stepPackage/parameters/_helpers/assignmentSetUserRetrieveResults</literal>
														</target>
													</fieldMap>
												</outputParameters>
												<onError>stop</onError>
											</otmCall>
											<if description="If there is at least one linked assignment set, retrieve and map to internalContacts collection">
												<test>
													<exists>
														<literal>/stepPackage/parameters/_helpers/assignmentSetUserRetrieveResults/rows/row</literal>
													</exists>
												</test>
												<then>
													<addNode>
														<path>
															<literal>/stepPackage/parameters/_persist</literal>
														</path>
														<name>
															<literal>internalContactSaveCollection</literal>
														</name>
													</addNode>
													<addNode>
														<path>
															<literal>/stepPackage/parameters/_persist/internalContactSaveCollection</literal>
														</path>
														<name>
															<literal>internalContacts</literal>
														</name>
													</addNode>
													<forEach>
														<path>
															<literal>/stepPackage/parameters/_helpers/assignmentSetUserRetrieveResults/rows/row[c1 !='' and c1 !='0']</literal>
														</path>
														<rules>
															<objectInstance description="create an instance of the internalContact object">
																<name>
																	<literal>internalContact</literal>
																</name>
																<path>
																	<literal>/stepPackage/parameters/_persist/internalContactSaveCollection/internalContacts</literal>
																</path>
															</objectInstance>
															<fieldMap>
																<source>
																	<literal>c1</literal>
																</source>
																<target>
																	<literal>/stepPackage/parameters/_persist/internalContactSaveCollection/internalContacts/internalContact[not(following-sibling::*)]/contactTypeId</literal>
																</target>
															</fieldMap>
															<fieldMap>
																<source>
																	<literal>c0</literal>
																</source>
																<target>
																	<literal>/stepPackage/parameters/_persist/internalContactSaveCollection/internalContacts/internalContact[not(following-sibling::*)]/contactUserId</literal>
																</target>
															</fieldMap>
															<setNodeValue>
																<path>
																	<literal>/stepPackage/parameters/_persist/internalContactSaveCollection/internalContacts/internalContact[not(following-sibling::*)]/ownerType</literal>
																</path>
																<value>
																	<literal>1</literal>
																</value>
															</setNodeValue>
															<addNode description="Add a node to parameters return">
																<path>
																	<literal>/stepPackage/parameters/_persist/internalContactSaveCollection/internalContacts/internalContact[not(following-sibling::*)]</literal>
																</path>
																<name>
																	<literal>@action</literal>
																</name>
															</addNode>
															<setNodeValue>
																<path>
																	<literal>/stepPackage/parameters/_persist/internalContactSaveCollection/internalContacts/internalContact[not(following-sibling::*)]/@action</literal>
																</path>
																<value>
																	<literal>insert</literal>
																</value>
															</setNodeValue>
														</rules>
													</forEach>
												</then>
											</if>
										</then>
									</if>
								</rule>
								<!--<rule description="Save XML">
									<saveXML mode="development" description="Save XML node contents to file">
										<name>
											<literal>c:\temp\individualLoggingTrueCondition.xml</literal>
										</name>
										<path>
											<literal>../../../currentConditionId</literal>
										</path>
									</saveXML>
								</rule>-->
							</rules>
						</then>
					</if>
				</rule>
			</rules>
		</forEach>
	</rule>
	<rule description="Cleanup">
		<removeNodes description="Remove _helpers node">
			<path>
				<literal>/stepPackage/parameters</literal>
			</path>
			<name>
				<literal>_helpers</literal>
			</name>
		</removeNodes>
		<!--<saveXML mode="development" description="Save XML node contents to file">
			<name>
				<literal>c:\temp\individualLoggingProcessRules.xml</literal>
			</name>
			<path>
				<literal>.</literal>
			</path>
		</saveXML>-->
	</rule>
</rules>