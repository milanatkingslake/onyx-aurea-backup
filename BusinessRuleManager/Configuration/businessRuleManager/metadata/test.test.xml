<!-- Copyright Aptean 2017. All rights reserved. -->
<rules xmlns="http://www.consonacrm.com/brm"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.consonacrm.com/brm ../grammar/onyx/businessRuleManager.grammar.onyx.xsd"
	description="TEST rule set">
	<rule description="This rule demonstrates IF/THEN grammar with a complex boolean expression, and returns an error to the calling process">
		<if description="First and last name are required">
			<test>
				<or>
					<not>
						<exists>
							<literal>firstName[.!='']</literal>
						</exists>
					</not>
					<not>
						<exists>
							<literal>lastName[.!='']</literal>
						</exists>
					</not>
				</or>
			</test>
			<then>
				<returnMessage description="Return an Onyx error message with arguments">
					<type>message</type>
					<msgId>1000113</msgId>
					<arguments>
						<literal>First and Last Name</literal>
					</arguments>
				</returnMessage>
				<returnMessage description="Return an Onyx error message with arguments">
					<type>warning</type>
					<msgId>1000113</msgId>
					<arguments>
						<literal>First and Last Name</literal>
					</arguments>
				</returnMessage>
				<returnMessage description="Return an Onyx error message with arguments">
					<type>error</type>
					<msgId>1000113</msgId>
					<arguments>
						<literal>First and Last Name</literal>
					</arguments>
				</returnMessage>
			</then>
		</if>
	</rule>
	<rule description="This rule demonstrates the switch operator">
		<addNode description="Add a test node for switch tests">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>switchTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/switchTests</literal>
			</path>
			<rules>
				<switch>
					<case description="This case block is false - rules won't be executed">
						<test>
							<literal>0</literal>
						</test>
						<rules>
							<addNode>
								<path>
									<literal>.</literal>
								</path>
								<name>
									<literal>caseExecuted</literal>
								</name>
								<value>
									<literal>This case should NOT be executed</literal>
								</value>
							</addNode>
						</rules>
					</case>
					<case description="This case block is true - rules won't be executed">
						<test>
							<literal>1</literal>
						</test>
						<rules>
							<addNode>
								<path>
									<literal>.</literal>
								</path>
								<name>
									<literal>caseExecuted</literal>
								</name>
								<value>
									<literal>This case SHOULD be executed</literal>
								</value>
							</addNode>
						</rules>
					</case>
					<case description="This case block is after a true case - rules won't be executed">
						<test>
							<literal>1</literal>
						</test>
						<rules>
							<addNode>
								<path>
									<literal>.</literal>
								</path>
								<name>
									<literal>caseExecuted</literal>
								</name>
								<value>
									<literal>This case should NOT be executed</literal>
								</value>
							</addNode>
						</rules>
					</case>
					<default>
						<rules>
							<addNode>
								<path>
									<literal>.</literal>
								</path>
								<name>
									<literal>defaultExecuted</literal>
								</name>
								<value>
									<literal>This default should NOT be executed</literal>
								</value>
							</addNode>
						</rules>
					</default>
				</switch>
				<switch>
					<case description="This case block is false - rules won't be executed">
						<test>
							<literal>0</literal>
						</test>
						<rules>
							<addNode>
								<path>
									<literal>.</literal>
								</path>
								<name>
									<literal>caseExecuted</literal>
								</name>
								<value>
									<literal>This case should not be executed</literal>
								</value>
							</addNode>
						</rules>
					</case>
					<default>
						<rules>
							<addNode>
								<path>
									<literal>.</literal>
								</path>
								<name>
									<literal>defaultExecuted</literal>
								</name>
								<value>
									<literal>This default SHOULD be executed</literal>
								</value>
							</addNode>
						</rules>
					</default>
				</switch>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates changing the context path and adding/removing XML nodes">
		<usePath description="Change context to return parameters">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<rules>
				<addNode description="Add an empty node">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>emptyChild</literal>
					</name>
				</addNode>
				<addNode description="Add a node, set the value to a literal">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testChild</literal>
					</name>
					<value>
						<literal>Test value for new node</literal>
					</value>
				</addNode>
				<addNode description="Add a node, set the value to null">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testChildNull</literal>
					</name>
					<value>
						<literal></literal>
					</value>
				</addNode>
				<addNode description="Add a node, set the value from another node">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testChildSetValue</literal>
					</name>
					<value>
						<getNodeValue>
							<literal>nodeTests/testChild</literal>
						</getNodeValue>
					</value>
				</addNode>
				<addNode description="Add a node using complex XPath expression">
					<path>
						<literal>//*[name()='nodeTests']</literal>
					</path>
					<name>
						<literal>testChildComplex</literal>
					</name>
					<value>
						<literal>Test value for new complex node</literal>
					</value>
				</addNode>
				<addNode description="Get the name of a node">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testNodeName</literal>
					</name>
					<value>
						<getNodeName>
							<literal>//*[name()='nodeTests']</literal>
						</getNodeName>
					</value>
				</addNode>
				<copyNode description="Copy a node">
					<source>
						<literal>nodeTests/testChild</literal>
					</source>
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testChildCopy</literal>
					</name>
				</copyNode>
				<addNode description="Add XML attribute">
					<path>
						<literal>nodeTests/testChildCopy</literal>
					</path>
					<name>
						<literal>@testAttribute</literal>
					</name>
					<value>
						<literal>test attribute value</literal>
					</value>
				</addNode>
				<addNode description="Add a test node to remove">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testChildRemove</literal>
					</name>
					<value>
						<literal>This node will be removed</literal>
					</value>
				</addNode>
				<removeNodes description="Remove a node using complex XPath expression">
					<path>
						<literal>//*[name()='nodeTests']</literal>
					</path>
					<name>
						<literal>*[name()='testChildRemove']</literal>
					</name>
				</removeNodes>
				<addNode description="Add a test node to load XML string">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testSetXML</literal>
					</name>
				</addNode>
				<setNodeXML description="Set XML content from XML string">
					<path>
						<literal>nodeTests/testSetXML</literal>
					</path>
					<value>
						<literal>&lt;testXml&gt;value of testXml node&lt;/testXml&gt;</literal>
					</value>
				</setNodeXML>
				<addNode description="Add a test node to set CDATA value">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testCData</literal>
					</name>
				</addNode>
				<setCDataNodeValue description="Set CData value to XML string">
					<path>
						<literal>nodeTests/testCData</literal>
					</path>
					<value>
						<literal>&lt;testXml&gt;value of testXml node&lt;/testXml&gt;</literal>
					</value>
				</setCDataNodeValue>
				<addNode description="Add a test node to expand CDATA value">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testCDataExpanded</literal>
					</name>
				</addNode>
				<addNode description="Add a test node with a node count">
					<path>
						<literal>nodeTests</literal>
					</path>
					<name>
						<literal>testNodeCount</literal>
					</name>
					<value>
						<getNodeCount>
							<literal>//parametersReturn/*</literal>
						</getNodeCount>
					</value>
				</addNode>
				<setNodeXML description="Set XML content from XML string in CDATA value">
					<path>
						<literal>nodeTests/testCDataExpanded</literal>
					</path>
					<value>
						<getCDataNodeValue>
							<literal>nodeTests/testCData</literal>
						</getCDataNodeValue>
					</value>
				</setNodeXML>
				<fieldMap description="Test field mapping">
					<source>
						<literal>nodeTests/testChildCopy</literal>
					</source>
					<target>
						<literal>nodeTests/testChildMapped</literal>
					</target>
				</fieldMap>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates a WHILE loop">
		<usePath description="Change context to return parameters">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<rules>
				<while description="Loop until a node exists to stop the while loop">
					<test>
						<not>
							<exists>
								<literal>whileTest/stopWhileLoop</literal>
							</exists>
						</not>
					</test>
					<rules>
						<addNode description="Add node to stop the loop">
							<path>
								<literal>whileTest</literal>
							</path>
							<name>
								<literal>stopWhileLoop</literal>
							</name>
						</addNode>
					</rules>
				</while>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates setting date values, adding date intervals, UTC/local timezone conversion">
		<usePath description="Change context to return parameters">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<rules>
				<addNode description="Add a start date, set to yesterday">
					<path>
						<literal>dateTests</literal>
					</path>
					<name>
						<literal>startDate</literal>
					</name>
					<value>
						<dateAdd>
							<part>day</part>
							<number>
								<literal>-1</literal>
							</number>
							<value>
								<dateNow/>
							</value>
						</dateAdd>
					</value>
				</addNode>
				<addNode description="Add an end date, set to 2 weeks from now">
					<path>
						<literal>dateTests</literal>
					</path>
					<name>
						<literal>endDate</literal>
					</name>
					<value>
						<dateAdd>
							<part>week</part>
							<number>
								<literal>2</literal>
							</number>
							<value>
								<dateNow/>
							</value>
						</dateAdd>
					</value>
				</addNode>
				<addNode description="Convert start date to UTC">
					<path>
						<literal>dateTests</literal>
					</path>
					<name>
						<literal>startDateUTC</literal>
					</name>
					<value>
						<localToUTC>
							<getNodeValue>
								<literal>dateTests/startDate</literal>
							</getNodeValue>
						</localToUTC>
					</value>
				</addNode>
				<addNode description="Convert UTC date to local">
					<path>
						<literal>dateTests</literal>
					</path>
					<name>
						<literal>startDateUTC</literal>
					</name>
					<value>
						<UTCToLocal>
							<getNodeValue>
								<literal>dateTests/startDateUTC</literal>
							</getNodeValue>
						</UTCToLocal>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates date comparisons">
		<usePath description="Change context to return parameters">
			<path>
				<literal>//parametersReturn/dateTests</literal>
			</path>
			<rules>
				<addNode description="Test if start and end dates are equal">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>datesEqual</literal>
					</name>
					<value>
						<dateEqualTo>
							<left>
								<getNodeValue>
									<literal>startDate</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>endDate</literal>
								</getNodeValue>
							</right>
						</dateEqualTo>
					</value>
				</addNode>
				<addNode description="Test if start date is less than end date">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>datesLessThan</literal>
					</name>
					<value>
						<dateLessThan>
							<left>
								<getNodeValue>
									<literal>startDate</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>endDate</literal>
								</getNodeValue>
							</right>
						</dateLessThan>
					</value>
				</addNode>
				<addNode description="Test if start date is greater than end date">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>datesGreaterThan</literal>
					</name>
					<value>
						<dateGreaterThan>
							<left>
								<getNodeValue>
									<literal>startDate</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>endDate</literal>
								</getNodeValue>
							</right>
						</dateGreaterThan>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates accessing date parts">
		<usePath description="Change context to return parameters">
			<path>
				<literal>//parametersReturn/dateTests</literal>
			</path>
			<rules>
				<addNode description="Get current year">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>year</literal>
					</name>
					<value>
						<datePart>
							<part>year</part>
							<value>
								<dateNow/>
							</value>
						</datePart>
					</value>
				</addNode>
				<addNode description="Get current month">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>month</literal>
					</name>
					<value>
						<datePart>
							<part>month</part>
							<value>
								<dateNow/>
							</value>
						</datePart>
					</value>
				</addNode>
				<addNode description="Get current day">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>day</literal>
					</name>
					<value>
						<datePart>
							<part>day</part>
							<value>
								<dateNow/>
							</value>
						</datePart>
					</value>
				</addNode>
				<addNode description="Get current weekday">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>weekday</literal>
					</name>
					<value>
						<datePart>
							<part>weekday</part>
							<value>
								<dateNow/>
							</value>
						</datePart>
					</value>
				</addNode>
				<addNode description="Get current hour">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>hour</literal>
					</name>
					<value>
						<datePart>
							<part>hour</part>
							<value>
								<dateNow/>
							</value>
						</datePart>
					</value>
				</addNode>
				<addNode description="Get current minute">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>minute</literal>
					</name>
					<value>
						<datePart>
							<part>minute</part>
							<value>
								<dateNow/>
							</value>
						</datePart>
					</value>
				</addNode>
				<addNode description="Get current second">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>second</literal>
					</name>
					<value>
						<datePart>
							<part>second</part>
							<value>
								<dateNow/>
							</value>
						</datePart>
					</value>
				</addNode>
				<addNode description="Get current millisecond">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>millisecond</literal>
					</name>
					<value>
						<datePart>
							<part>millisecond</part>
							<value>
								<dateNow/>
							</value>
						</datePart>
					</value>
				</addNode>
				<addNode description="Get start of current minute">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>startOfMinute</literal>
					</name>
					<value>
						<startOfMinute>
							<dateNow/>
						</startOfMinute>
					</value>
				</addNode>
				<addNode description="Get start of current week">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>startOfWeek</literal>
					</name>
					<value>
						<startOfWeek>
							<dateNow/>
						</startOfWeek>
					</value>
				</addNode>
				<addNode description="Get date difference between 1970/01/14 and now">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>diffYear</literal>
					</name>
					<value>
						<dateDiff>
							<part>year</part>
							<left>
								<dateNow/>
							</left>
							<right>
								<literal>1970-01-14 00:00:00</literal>
							</right>
						</dateDiff>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>diffMonth</literal>
					</name>
					<value>
						<dateDiff>
							<part>month</part>
							<left>
								<dateNow/>
							</left>
							<right>
								<literal>1970-01-14 00:00:00</literal>
							</right>
						</dateDiff>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>diffDay</literal>
					</name>
					<value>
						<dateDiff>
							<part>day</part>
							<left>
								<dateNow/>
							</left>
							<right>
								<literal>1970-01-14 00:00:00</literal>
							</right>
						</dateDiff>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>diffHour</literal>
					</name>
					<value>
						<dateDiff>
							<part>hour</part>
							<left>
								<dateNow/>
							</left>
							<right>
								<literal>1970-01-14 00:00:00</literal>
							</right>
						</dateDiff>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>diffMinute</literal>
					</name>
					<value>
						<dateDiff>
							<part>minute</part>
							<left>
								<dateNow/>
							</left>
							<right>
								<literal>1970-01-14 00:00:00</literal>
							</right>
						</dateDiff>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>diffSecond</literal>
					</name>
					<value>
						<dateDiff>
							<part>second</part>
							<left>
								<dateNow/>
							</left>
							<right>
								<literal>1970-01-14 00:00:00</literal>
							</right>
						</dateDiff>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>diffMillisecond</literal>
					</name>
					<value>
						<dateDiff>
							<part>millisecond</part>
							<left>
								<dateNow/>
							</left>
							<right>
								<literal>1970-01-14 00:00:00</literal>
							</right>
						</dateDiff>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates data encryption/decryption">
		<usePath description="Change context to return parameters">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<rules>
				<addNode description="Add a node and set the encrypted value">
					<path>
						<literal>encryptionTests</literal>
					</path>
					<name>
						<literal>encryptedValue</literal>
					</name>
					<value>
						<encrypt>
							<key>
								<literal>12345678901234567890123456789012</literal>
							</key>
							<vector>
								<literal>1234567890123456</literal>
							</vector>
							<value>
								<literal>Here is the sensitive data to encrypt</literal>
							</value>
						</encrypt>
					</value>
				</addNode>
				<addNode description="Decrypt the value and add to a new node">
					<path>
						<literal>encryptionTests</literal>
					</path>
					<name>
						<literal>decryptedValue</literal>
					</name>
					<value>
						<decrypt>
							<key>
								<literal>12345678901234567890123456789012</literal>
							</key>
							<vector>
								<literal>1234567890123456</literal>
							</vector>
							<value>
								<getNodeValue>
									<literal>encryptionTests/encryptedValue</literal>
								</getNodeValue>
							</value>
						</decrypt>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates string functions">
		<addNode description="Add node to contain string test results">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>stringTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to return parameters">
			<path>
				<literal>//parametersReturn/stringTests</literal>
			</path>
			<rules>
				<addNode description="Set description to sample mixed-case string">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>description</literal>
					</name>
					<value>
						<literal>Mixed case string! This is a SAMPLE string value to change from UPPER to lower...</literal>
					</value>
				</addNode>
				<addNode description="Get length of test string">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>length</literal>
					</name>
					<value>
						<concatenate>
							<literal>length of description:&#160;</literal>
							<toString>
								<stringLength>
									<getNodeValue>
										<literal>description</literal>
									</getNodeValue>
								</stringLength>
							</toString>
						</concatenate>
					</value>
				</addNode>
				<addNode description="Convert test string to lower case">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>lowerCase</literal>
					</name>
					<value>
						<lowerCase>
							<getNodeValue>
								<literal>description</literal>
							</getNodeValue>
						</lowerCase>
					</value>
				</addNode>
				<addNode description="Convert test string to upper case">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>upperCase</literal>
					</name>
					<value>
						<upperCase>
							<getNodeValue>
								<literal>description</literal>
							</getNodeValue>
						</upperCase>
					</value>
				</addNode>
				<addNode description="Replace UPPER value in test string with REPLACED">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>replacedText</literal>
					</name>
					<value>
						<replaceText>
							<find>
								<literal>UPPER</literal>
							</find>
							<replace>
								<literal>REPLACED</literal>
							</replace>
							<value>
								<getNodeValue>
									<literal>description</literal>
								</getNodeValue>
							</value>
						</replaceText>
					</value>
				</addNode>
				<addNode description="Test string concatenation with a complex expression">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>replacedText</literal>
					</name>
					<value>
						<concatenate>
							<replaceText>
								<find>
									<literal>UPPER</literal>
								</find>
								<replace>
									<literal>REPLACED</literal>
								</replace>
								<value>
									<getNodeValue>
										<literal>description</literal>
									</getNodeValue>
								</value>
							</replaceText>
							<literal>... concatenated text</literal>
							<upperCase>
								<literal>... ending text</literal>
							</upperCase>
						</concatenate>
					</value>
				</addNode>
				<addNode description="Get substring">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>substring6_6</literal>
					</name>
					<value>
						<substring>
							<start>
								<literal>6</literal>
							</start>
							<length>
								<literal>6</literal>
							</length>
							<value>
								<getNodeValue>
									<literal>description</literal>
								</getNodeValue>
							</value>
						</substring>
					</value>
				</addNode>
				<addNode description="Test substring without length">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>substring6</literal>
					</name>
					<value>
						<substring>
							<start>
								<literal>6</literal>
							</start>
							<value>
								<getNodeValue>
									<literal>description</literal>
								</getNodeValue>
							</value>
						</substring>
					</value>
				</addNode>
				<addNode description="Set phone number to sample formatted expression">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>phoneNumber</literal>
					</name>
					<value>
						<literal>+1 (555) 666-7777 x101</literal>
					</value>
				</addNode>
				<addNode description="Test regular expression replace to strip non-numeric characters from phone number">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>phoneNumberReplaced</literal>
					</name>
					<value>
						<replaceRegex>
							<find>
								<literal>\D+</literal>
							</find>
							<replace>
								<literal></literal>
							</replace>
							<value>
								<getNodeValue>
									<literal>phoneNumber</literal>
								</getNodeValue>
							</value>
						</replaceRegex>
					</value>
				</addNode>
				<addNode description="Test string comparison between upper and lower case strings">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringsEqual</literal>
					</name>
					<value>
						<stringEqualTo>
							<left>
								<getNodeValue>
									<literal>lowerCase</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>upperCase</literal>
								</getNodeValue>
							</right>
						</stringEqualTo>
					</value>
				</addNode>
				<addNode description="Convert values to lower case and repeat string comparison">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringsEqual</literal>
					</name>
					<value>
						<stringEqualTo>
							<left>
								<lowerCase>
									<getNodeValue>
										<literal>lowerCase</literal>
									</getNodeValue>
								</lowerCase>
							</left>
							<right>
								<lowerCase>
									<getNodeValue>
										<literal>upperCase</literal>
									</getNodeValue>
								</lowerCase>
							</right>
						</stringEqualTo>
					</value>
				</addNode>
				<addNode description="Compare strings (greater than)">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringGreaterThan</literal>
					</name>
					<value>
						<stringGreaterThan>
							<left>
								<getNodeValue>
									<literal>lowerCase</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>upperCase</literal>
								</getNodeValue>
							</right>
						</stringGreaterThan>
					</value>
				</addNode>
				<addNode description="Compare strings (less than)">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringLessThan</literal>
					</name>
					<value>
						<stringLessThan>
							<left>
								<getNodeValue>
									<literal>lowerCase</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>upperCase</literal>
								</getNodeValue>
							</right>
						</stringLessThan>
					</value>
				</addNode>
				<addNode description="Set node value using iif operator (true)">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>iifTrue</literal>
					</name>
					<value>
						<iif>
							<test>
								<exists>
									<literal>//parameters</literal>
								</exists>
							</test>
							<then>
								<literal>then</literal>
							</then>
							<else>
								<literal>else</literal>
							</else>
						</iif>
					</value>
				</addNode>
				<addNode description="Set node value using iif operator (false)">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>iifFalse</literal>
					</name>
					<value>
						<iif>
							<test>
								<exists>
									<literal>//parametersNotThere</literal>
								</exists>
							</test>
							<then>
								<literal>then</literal>
							</then>
							<else>
								<literal>else</literal>
							</else>
						</iif>
					</value>
				</addNode>
				<addNode description="Get a new GUID value">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>newGuid</literal>
					</name>
					<value>
						<newGuid/>
					</value>
				</addNode>
				<addNode description="Get root path to repository">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>rootPath</literal>
					</name>
					<value>
						<rootPath/>
					</value>
				</addNode>
				<addNode description="Format string with no arguments">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringFormatNoArgs</literal>
					</name>
					<value>
						<stringFormat>
							<value>
								<literal>No arguments.</literal>
							</value>
							<arguments/>
						</stringFormat>
					</value>
				</addNode>
				<addNode description="Format string with simple (string) arguments">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringFormatSimple</literal>
					</name>
					<value>
						<stringFormat>
							<value>
								<literal>Argument 1: {0}, Argument 2: {1}</literal>
							</value>
							<arguments>
								<literal>1st argument</literal>
								<literal>2nd argument</literal>
							</arguments>
						</stringFormat>
					</value>
				</addNode>
				<addNode description="Format string with numeric arguments">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringFormatNumeric</literal>
					</name>
					<value>
						<stringFormat>
							<value>
								<literal>Decimal value (8 digits): {0:D8}</literal>
							</value>
							<arguments>
								<toInteger>
									<literal>12345</literal>
								</toInteger>
							</arguments>
						</stringFormat>
					</value>
				</addNode>
				<addNode description="Format number as hexidecimal">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringFormatHex</literal>
					</name>
					<value>
						<stringFormat>
							<value>
								<literal>Hex value: {0:X}</literal>
							</value>
							<arguments>
								<toInteger>
									<literal>123456789</literal>
								</toInteger>
							</arguments>
						</stringFormat>
					</value>
				</addNode>
				<addNode description="Format date">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringFormatDate</literal>
					</name>
					<value>
						<stringFormat>
							<value>
								<literal>Date value: {0:F}</literal>
							</value>
							<arguments>
								<dateNow/>
							</arguments>
						</stringFormat>
					</value>
				</addNode>
				<addNode description="Format date using literal date value">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stringFormatDateLiteral</literal>
					</name>
					<value>
						<stringFormat>
							<value>
								<literal>Date value: {0:F}</literal>
							</value>
							<arguments>
								<toDateTime>
									<literal>2000-06-22 11:59:59</literal>
								</toDateTime>
							</arguments>
						</stringFormat>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates delimited string functions">
		<addNode description="Add node to contain delimited string test results">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>delimitedStringTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to return parameters">
			<path>
				<literal>//parametersReturn/delimitedStringTests</literal>
			</path>
			<rules>
				<addNode description="Set delimitedString to sample delimited string">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>delimitedString</literal>
					</name>
					<value>
						<literal>101123;101124;101125;101126</literal>
					</value>
				</addNode>
				<forEachDelimitedString description="Split the delimited string and process rules for each value">
					<value>
						<getNodeValue>
							<literal>delimitedString</literal>
						</getNodeValue>
					</value>
					<separator>
						<literal>;</literal>
					</separator>
					<rules>
						<addNode description="Save split value">
							<path>
								<literal>.</literal>
							</path>
							<name>
								<literal>result</literal>
							</name>
							<value>
								<delimitedString/>
							</value>
						</addNode>
					</rules>
				</forEachDelimitedString>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates caching functions">
		<addNode>
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>cacheTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/cacheTests</literal>
			</path>
			<rules>
				<addNode description="Use test value for cache expression">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>testWrite</literal>
					</name>
					<value>
						<literal>This is the test cache string</literal>
					</value>
				</addNode>
				<cacheWrite description="Write the value to cache">
					<name>
						<literal>testWrite</literal>
					</name>
					<value>
						<getNodeValue>
							<literal>testWrite</literal>
						</getNodeValue>
					</value>
				</cacheWrite>
				<addNode description="Read the value from cache">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>testRead</literal>
					</name>
					<value>
						<cacheRead>
							<name>
								<literal>testWrite</literal>
							</name>
						</cacheRead>
					</value>
				</addNode>
				<cacheDelete description="Delete value from cache">
					<name>
						<literal>testWrite</literal>
					</name>
				</cacheDelete>
				<addNode description="Test reading deleted value from cache">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>testDelete</literal>
					</name>
					<value>
						<cacheRead>
							<name>
								<literal>testWrite</literal>
							</name>
						</cacheRead>
					</value>
				</addNode>
				<cacheWrite description="Write a value to the cache with a future expiration date">
					<name>
						<literal>testWrite</literal>
					</name>
					<value>
						<getNodeValue>
							<literal>testWrite</literal>
						</getNodeValue>
					</value>
					<expires>
						<dateAdd>
							<part>minute</part>
							<number>
								<literal>1</literal>
							</number>
							<value>
								<dateNowUTC/>
							</value>
						</dateAdd>
					</expires>
				</cacheWrite>
				<addNode description="Read value from cache with future expiration date">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>testReadNotExpired</literal>
					</name>
					<value>
						<cacheRead>
							<name>
								<literal>testWrite</literal>
							</name>
						</cacheRead>
					</value>
				</addNode>
				<cacheWrite description="Write an expired value to the cache">
					<name>
						<literal>testWrite</literal>
					</name>
					<value>
						<getNodeValue>
							<literal>testWrite</literal>
						</getNodeValue>
					</value>
					<expires>
						<dateNowUTC/>
					</expires>
				</cacheWrite>
				<addNode description="Read expired value from cache">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>testReadExpired</literal>
					</name>
					<value>
						<cacheRead>
							<name>
								<literal>testWrite</literal>
							</name>
						</cacheRead>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates logging functions">
		<usePath description="Change context to return parameters">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<rules>
				<logValue description="Log text value to Onyx event log">
					<name>
						<literal>Logging text value</literal>
					</name>
					<value>
						<getNodeValue>
							<literal>stringTests/description</literal>
						</getNodeValue>
					</value>
				</logValue>
				<logNode description="Log XML node value to Onyx event log">
					<name>
						<literal>Logging XML node contents</literal>
					</name>
					<path>
						<literal>stringTests/description</literal>
					</path>
				</logNode>
				<saveXML description="Save XML node contents to file">
					<name>
						<literal>c:\temp\logging.xml</literal>
					</name>
					<path>
						<literal>stringTests/description</literal>
					</path>
				</saveXML>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates XML load and XSL transforms">
		<saveXML description="Save parameters XML node contents to file">
			<name>
				<literal>c:\temp\parameters.xml</literal>
			</name>
			<path>
				<literal>//parameters</literal>
			</path>
		</saveXML>
		<copyFile description="Make a copy of the file">
			<source>
				<literal>c:\temp\parameters.xml</literal>
			</source>
			<target>
				<literal>c:\temp\parameters.copy.xml</literal>
			</target>
		</copyFile>
		<addNode description="Add a test node for XML load">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>xmlTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/xmlTests</literal>
			</path>
			<rules>
				<addNode description="Add a test node for XSLT">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>loadXML</literal>
					</name>
				</addNode>
				<setNodeXML description="Load previously saved XML file, add to return parameters">
					<path>
						<literal>loadXML</literal>
					</path>
					<value>
						<loadXML>
							<name>
								<literal>c:\temp\parameters.xml</literal>
							</name>
						</loadXML>
					</value>
				</setNodeXML>
				<deleteFile description="Delete the file">
					<name>
						<literal>c:\temp\parameters.xml</literal>
					</name>
				</deleteFile>
				<addNode description="Add a test node for XSLT">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>xsltOutput</literal>
					</name>
				</addNode>
				<setNodeXML description="Run test XSL transform (displays description)">
					<path>
						<literal>xsltOutput</literal>
					</path>
					<value>
						<xslt>
							<name>
								<concatenate>
									<rootPath/>
									<literal>\Transforms\test.xsl</literal>
								</concatenate>
							</name>
							<path>
								<literal>../stringTests</literal>
							</path>
						</xslt>
					</value>
				</setNodeXML>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates basic file operations">
		<addNode description="Add a test node for file operations">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>fileTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/fileTests</literal>
			</path>
			<rules>
				<if description="Check if the file exists">
					<test>
						<fileExists>
							<name>
								<literal>c:\temp\parameters.copy.xml</literal>
							</name>
						</fileExists>
					</test>
					<then>
						<fileInfo description="Get file information">
							<name>
								<literal>c:\temp\parameters.copy.xml</literal>
							</name>
							<rules>
								<addNode>
									<path>
										<literal>fileInfo</literal>
									</path>
									<name>
										<literal>size</literal>
									</name>
									<value>
										<fileInfoSize/>
									</value>
								</addNode>
								<addNode>
									<path>
										<literal>fileInfo</literal>
									</path>
									<name>
										<literal>insertDate</literal>
									</name>
									<value>
										<fileInfoCreateDate/>
									</value>
								</addNode>
								<addNode>
									<path>
										<literal>fileInfo</literal>
									</path>
									<name>
										<literal>updateDate</literal>
									</name>
									<value>
										<fileInfoUpdateDate/>
									</value>
								</addNode>
								<addNode>
									<path>
										<literal>fileInfo</literal>
									</path>
									<name>
										<literal>readOnly</literal>
									</name>
									<value>
										<fileInfoReadOnly/>
									</value>
								</addNode>
							</rules>
						</fileInfo>
						<addNode>
							<path>
								<literal>.</literal>
							</path>
							<name>
								<literal>fileNames</literal>
							</name>
						</addNode>
						<forEachFileInfo description="Get all the names and sizes of files matching a file specification">
							<name>
								<literal>*.xml</literal>
							</name>
							<path>
								<literal>c:\temp</literal>
							</path>
							<rules>
								<addNode>
									<path>
										<literal>fileNames</literal>
									</path>
									<name>
										<literal>name</literal>
									</name>
									<value>
										<fileInfoName/>
									</value>
								</addNode>
								<addNode>
									<path>
										<literal>fileNames</literal>
									</path>
									<name>
										<literal>path</literal>
									</name>
									<value>
										<fileInfoPath/>
									</value>
								</addNode>
								<addNode>
									<path>
										<literal>fileNames</literal>
									</path>
									<name>
										<literal>size</literal>
									</name>
									<value>
										<fileInfoSize/>
									</value>
								</addNode>
							</rules>
						</forEachFileInfo>
					</then>
				</if>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates text file read/write operations">
		<addNode description="Add a test node for file read/write operations">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>fileReadWriteTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/fileReadWriteTests</literal>
			</path>
			<rules>
				<textFileWriteOpen description="Open a file for writing (overwrite existing file)">
					<name>
						<literal>c:\temp\textFileWrite.txt</literal>
					</name>
					<append>
						<literal>0</literal>
					</append>
					<rules>
						<textFileWrite description="Write to file">
							<literal>1st line, 1st write.</literal>
						</textFileWrite>
						<textFileWriteLine description="Write to file, add end of line">
							<literal> First line, 2nd write.</literal>
						</textFileWriteLine>
						<textFileWriteLine>
							<literal>2nd line.</literal>
						</textFileWriteLine>
					</rules>
				</textFileWriteOpen>
				<textFileWriteOpen description="Open a file for appending">
					<name>
						<literal>c:\temp\textFileWrite.txt</literal>
					</name>
					<append>
						<literal>1</literal>
					</append>
					<rules>
						<textFileWriteLine description="Write to file, add end of line">
							<literal>Append file, 1st line.</literal>
						</textFileWriteLine>
						<textFileWriteLine description="Write to file, add end of line">
							<literal>Append file, 2nd line.</literal>
						</textFileWriteLine>
					</rules>
				</textFileWriteOpen>
				<textFileReadOpen description="Open a file for reading">
					<name>
						<literal>c:\temp\textFileWrite.txt</literal>
					</name>
					<rules>
						<while description="Read each line until end of the file">
							<test>
								<not>
									<textFileReadEOF/>
								</not>
							</test>
							<rules>
								<addNode>
									<path>
										<literal>.</literal>
									</path>
									<name>
										<literal>line</literal>
									</name>
									<value>
										<textFileReadLine/>
									</value>
								</addNode>
							</rules>
						</while>
					</rules>
				</textFileReadOpen>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates data type conversions">
		<addNode description="Add a test node for XML load">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>typeTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/typeTests</literal>
			</path>
			<rules>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>integer</literal>
					</name>
					<value>
						<toInteger>
							<literal>2.97</literal>
						</toInteger>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>float</literal>
					</name>
					<value>
						<toFloat>
							<literal>2.97</literal>
						</toFloat>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates integer operators">
		<addNode>
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>integerTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/integerTests</literal>
			</path>
			<rules>
				<addNode description="Use left=11, right=3">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>left</literal>
					</name>
					<value>
						<literal>11</literal>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>right</literal>
					</name>
					<value>
						<literal>3</literal>
					</value>
				</addNode>
				<addNode description="+ operator">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>add</literal>
					</name>
					<value>
						<integerAdd>
							<left>
								<getNodeValue>
									<literal>left</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>right</literal>
								</getNodeValue>
							</right>
						</integerAdd>
					</value>
				</addNode>
				<addNode description="- operator">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>subtract</literal>
					</name>
					<value>
						<integerSubtract>
							<left>
								<getNodeValue>
									<literal>left</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>right</literal>
								</getNodeValue>
							</right>
						</integerSubtract>
					</value>
				</addNode>
				<addNode description="x operator">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>multiply</literal>
					</name>
					<value>
						<integerMultiply>
							<left>
								<getNodeValue>
									<literal>left</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>right</literal>
								</getNodeValue>
							</right>
						</integerMultiply>
					</value>
				</addNode>
				<addNode description="/ operator">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>divide</literal>
					</name>
					<value>
						<integerDivide>
							<left>
								<getNodeValue>
									<literal>left</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>right</literal>
								</getNodeValue>
							</right>
						</integerDivide>
					</value>
				</addNode>
				<addNode description="modulo operator">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>modulo</literal>
					</name>
					<value>
						<modulo>
							<left>
								<getNodeValue>
									<literal>left</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>right</literal>
								</getNodeValue>
							</right>
						</modulo>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates floating point operators">
		<addNode>
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>floatTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/floatTests</literal>
			</path>
			<rules>
				<addNode description="Use left=11.25, right=3.70">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>left</literal>
					</name>
					<value>
						<literal>11.25</literal>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>right</literal>
					</name>
					<value>
						<literal>3.70</literal>
					</value>
				</addNode>
				<addNode description="+ operator">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>add</literal>
					</name>
					<value>
						<floatAdd>
							<left>
								<getNodeValue>
									<literal>left</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>right</literal>
								</getNodeValue>
							</right>
						</floatAdd>
					</value>
				</addNode>
				<addNode description="- operator">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>subtract</literal>
					</name>
					<value>
						<floatSubtract>
							<left>
								<getNodeValue>
									<literal>left</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>right</literal>
								</getNodeValue>
							</right>
						</floatSubtract>
					</value>
				</addNode>
				<addNode description="x operator">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>multiply</literal>
					</name>
					<value>
						<floatMultiply>
							<left>
								<getNodeValue>
									<literal>left</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>right</literal>
								</getNodeValue>
							</right>
						</floatMultiply>
					</value>
				</addNode>
				<addNode description="/ operator">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>divide</literal>
					</name>
					<value>
						<floatDivide>
							<left>
								<getNodeValue>
									<literal>left</literal>
								</getNodeValue>
							</left>
							<right>
								<getNodeValue>
									<literal>right</literal>
								</getNodeValue>
							</right>
						</floatDivide>
					</value>
				</addNode>
				<addNode description="Round">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>round</literal>
					</name>
					<value>
						<round>
							<number>
								<literal>3</literal>
							</number>
							<value>
								<floatDivide>
									<left>
										<getNodeValue>
											<literal>left</literal>
										</getNodeValue>
									</left>
									<right>
										<getNodeValue>
											<literal>right</literal>
										</getNodeValue>
									</right>
								</floatDivide>
							</value>
						</round>
					</value>
				</addNode>
				<addNode description="Floor">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>floor</literal>
					</name>
					<value>
						<floor>
							<getNodeValue>
								<literal>left</literal>
							</getNodeValue>
						</floor>
					</value>
				</addNode>
				<addNode description="Ceiling">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>ceiling</literal>
					</name>
					<value>
						<ceiling>
							<getNodeValue>
								<literal>left</literal>
							</getNodeValue>
						</ceiling>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule description="This rule demonstrates calling a sub-process in another ruleset">
		<subProcess>
			<name>
				<literal>test.subProcess.xml</literal>
			</name>
			<arguments>
				<setArgumentValue>
					<name>
						<literal>argument1</literal>
					</name>
					<value>
						<literal>value1</literal>
					</value>
				</setArgumentValue>
				<setArgumentValue>
					<name>
						<literal>argument2</literal>
					</name>
					<value>
						<literal>value2</literal>
					</value>
				</setArgumentValue>
			</arguments>
		</subProcess>
	</rule>
	<rule description="This rule demonstrates ODBC connection operations">
		<addNode description="Add a test node for ODBC operations">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>odbcTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/odbcTests</literal>
			</path>
			<rules>
				<odbcConnection description="Establish ODBC connection">
					<name>
						<literal>TEST</literal>
					</name>
					<rules>
						<odbcCall description="Retrieve 1st company (simple SELECT)">
							<statement>
								<literal>select top 1 * from company</literal>
							</statement>
							<inputParameters/>
							<outputParameters>
								<odbcForEachRow description="Loop through returned rows">
									<rules>
										<addNode description="Save returned column values">
											<path>
												<literal>.</literal>
											</path>
											<name>
												<literal>companyId</literal>
											</name>
											<value>
												<odbcFieldValue>
													<name>
														<literal>company_id</literal>
													</name>
												</odbcFieldValue>
											</value>
										</addNode>
									</rules>
								</odbcForEachRow>
							</outputParameters>
						</odbcCall>
						<odbcCall description="Retrieve Onyx site using context site ID (SELECT with parameters)">
							<statement>
								<literal>select * from site where site_id = ?</literal>
							</statement>
							<inputParameters>
								<odbcAddParameter description="Add parameter for site ID">
									<name>
										<literal>site_id</literal>
									</name>
									<type>
										<literal>Int</literal>
									</type>
									<direction>
										<literal>Input</literal>
									</direction>
									<value>
										<getNodeValue>
											<literal>//context/siteId</literal>
										</getNodeValue>
									</value>
								</odbcAddParameter>
							</inputParameters>
							<outputParameters>
								<addNode description="Get column count">
									<path>
										<literal>.</literal>
									</path>
									<name>
										<literal>columnCount</literal>
									</name>
									<value>
										<odbcColumnCount/>
									</value>
								</addNode>
								<addNode description="Get row count">
									<path>
										<literal>.</literal>
									</path>
									<name>
										<literal>rowCount</literal>
									</name>
									<value>
										<odbcRowCount/>
									</value>
								</addNode>
								<odbcForEachRow description="Loop through returned rows">
									<rules>
										<addNode description="Save returned column values">
											<path>
												<literal>.</literal>
											</path>
											<name>
												<literal>siteCode</literal>
											</name>
											<value>
												<odbcFieldValue>
													<name>
														<literal>site_code</literal>
													</name>
												</odbcFieldValue>
											</value>
										</addNode>
										<addNode>
											<path>
												<literal>.</literal>
											</path>
											<name>
												<literal>siteId</literal>
											</name>
											<value>
												<odbcFieldValue>
													<number>
														<literal>0</literal>
													</number>
												</odbcFieldValue>
											</value>
										</addNode>
										<addNode>
											<path>
												<literal>.</literal>
											</path>
											<name>
												<literal>updateDate</literal>
											</name>
											<value>
												<odbcFieldValue>
													<name>
														<literal>update_date</literal>
													</name>
												</odbcFieldValue>
											</value>
										</addNode>
										<addNode>
											<path>
												<literal>.</literal>
											</path>
											<name>
												<literal>onyxTimestamp</literal>
											</name>
											<value>
												<odbcFieldValue>
													<name>
														<literal>onyx_timestamp</literal>
													</name>
												</odbcFieldValue>
											</value>
										</addNode>
									</rules>
								</odbcForEachRow>
							</outputParameters>
						</odbcCall>
						<odbcCall description="Retrieve list of countries (stored procedure call)">
							<statement>
								<literal>{ ? = CALL opCountryRetrieveList( ?, ?) }</literal>
							</statement>
							<inputParameters>
								<odbcAddParameter description="Add parameter for return code">
									<name>
										<literal>return_code</literal>
									</name>
									<type>
										<literal>Int</literal>
									</type>
									<direction>
										<literal>ReturnValue</literal>
									</direction>
								</odbcAddParameter>
								<odbcAddParameter description="Add parameter for site ID">
									<name>
										<literal>site_id</literal>
									</name>
									<type>
										<literal>Int</literal>
									</type>
									<direction>
										<literal>Input</literal>
									</direction>
									<value>
										<getNodeValue>
											<literal>//context/siteId</literal>
										</getNodeValue>
									</value>
								</odbcAddParameter>
								<odbcAddParameter description="Add parameter for language code">
									<name>
										<literal>language_code</literal>
									</name>
									<type>
										<literal>NChar</literal>
									</type>
									<size>
										<literal>4</literal>
									</size>
									<direction>
										<literal>Input</literal>
									</direction>
									<value>
										<getNodeValue>
											<literal>//context/preferredLanguage</literal>
										</getNodeValue>
									</value>
								</odbcAddParameter>
							</inputParameters>
							<outputParameters>
								<addNode>
									<path>
										<literal>.</literal>
									</path>
									<name>
										<literal>countries</literal>
									</name>
								</addNode>
								<odbcForEachRow description="Loop through returned rows">
									<rules>
										<objectInstance description="Add incident object to return parameters">
											<path>
												<literal>countries</literal>
											</path>
											<name>
												<literal>country</literal>
											</name>
										</objectInstance>
										<usePath>
											<path>
												<literal>countries/country[last()]</literal>
											</path>
											<rules>
												<setNodeValue description="Save returned column values">
													<path>
														<literal>countryCode</literal>
													</path>
													<value>
														<odbcFieldValue>
															<name>
																<literal>country_code</literal>
															</name>
														</odbcFieldValue>
													</value>
												</setNodeValue>
												<setNodeValue>
													<path>
														<literal>countryName</literal>
													</path>
													<value>
														<odbcFieldValue>
															<name>
																<literal>country_desc</literal>
															</name>
														</odbcFieldValue>
													</value>
												</setNodeValue>
												<setNodeValue>
													<path>
														<literal>phoneMask</literal>
													</path>
													<value>
														<odbcFieldValue>
															<name>
																<literal>phone_mask</literal>
															</name>
														</odbcFieldValue>
													</value>
												</setNodeValue>
												<setNodeValue>
													<path>
														<literal>postCodeMask</literal>
													</path>
													<value>
														<odbcFieldValue>
															<name>
																<literal>post_code_mask</literal>
															</name>
														</odbcFieldValue>
													</value>
												</setNodeValue>
												<setNodeValue>
													<path>
														<literal>addressFormat</literal>
													</path>
													<value>
														<odbcFieldValue>
															<name>
																<literal>address_format</literal>
															</name>
														</odbcFieldValue>
													</value>
												</setNodeValue>
											</rules>
										</usePath>
									</rules>
								</odbcForEachRow>
								<odbcConvertToRowSet description="Add result set as an Onyx rowSet object">
									<path>
										<literal>.</literal>
									</path>
									<msgId>
										<literal>723500</literal>
									</msgId>
								</odbcConvertToRowSet>
							</outputParameters>
						</odbcCall>
					</rules>
				</odbcConnection>
			</rules>
		</usePath>
	</rule>
	<rule description="Onyx rules - add an object instance">
		<objectInstance description="Add incident object to return parameters">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>incident</literal>
			</name>
		</objectInstance>
	</rule>
	<rule description="Onyx rules - check security permissions">
		<if>
			<test>
				<not>
					<hasPermission>
						<literal>UI:SecurityAdministration</literal>
					</hasPermission>
				</not>
			</test>
			<then>
				<returnMessage description="Return an error message">
					<type>error</type>
					<msgId>729055</msgId>
				</returnMessage>
			</then>
		</if>
	</rule>
	<rule description="Onyx rules - test OTM call">
		<otmCall description="Call systemParameter.retrieve">
			<object>
				<literal>systemParameter</literal>
			</object>
			<method>
				<literal>retrieve</literal>
			</method>
			<inputParameters description="Add parameters to retrieve Onyx session timeout">
				<objectInstance>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>systemParameter</literal>
					</name>
				</objectInstance>
				<setNodeValue>
					<path>
						<literal>systemParameter/code</literal>
					</path>
					<value>
						<literal>GlobalSessionTimeout</literal>
					</value>
				</setNodeValue>
				<saveXML description="Log source contents to file">
					<name>
						<literal>c:\temp\otmCall.source.xml</literal>
					</name>
					<path>
						<literal>.</literal>
					</path>
				</saveXML>
				<saveXML description="Log target contents to file">
					<name>
						<literal>c:\temp\otmCall.target.xml</literal>
					</name>
					<path>
						<literal>.</literal>
					</path>
					<source>target</source>
				</saveXML>
			</inputParameters>
			<outputParameters description="Save system parameter object in return parameters">
				<fieldMap>
					<source>
						<literal>systemParameter</literal>
					</source>
					<target>
						<literal>//parametersReturn/systemParameter</literal>
					</target>
				</fieldMap>
			</outputParameters>
			<onError>stop</onError>
		</otmCall>
	</rule>
	<rule description="Onyx rules - test Onyx session grammar">
		<addNode description="Add a test node for XML load">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>sessionTests</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/sessionTests</literal>
			</path>
			<rules>
				<setSessionItem>
					<name>
						<literal>TestValue</literal>
					</name>
					<value>
						<literal>test value</literal>
					</value>
				</setSessionItem>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>testSessionValue</literal>
					</name>
					<value>
						<getSessionItem>
							<name>
								<literal>TestValue</literal>
							</name>
						</getSessionItem>
					</value>
				</addNode>
				<removeSessionItem>
					<name>
						<literal>TestValue</literal>
					</name>
				</removeSessionItem>
			</rules>
		</usePath>
	</rule>
	<rule description="Onyx rules - test step additional data">
		<addNode description="Add a test node for XML load">
			<path>
				<literal>//parametersReturn</literal>
			</path>
			<name>
				<literal>stepAdditionalData</literal>
			</name>
		</addNode>
		<usePath description="Change context to test in return parameters">
			<path>
				<literal>//parametersReturn/stepAdditionalData</literal>
			</path>
			<rules>
				<addNode description="Get the step additional data values">
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stepObject</literal>
					</name>
					<value>
						<stepAdditionalData>
							<name>
								<literal>stepObject</literal>
							</name>
						</stepAdditionalData>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>stepMethod</literal>
					</name>
					<value>
						<stepAdditionalData>
							<name>
								<literal>stepMethod</literal>
							</name>
						</stepAdditionalData>
					</value>
				</addNode>
				<addNode>
					<path>
						<literal>.</literal>
					</path>
					<name>
						<literal>metadataFile</literal>
					</name>
					<value>
						<stepAdditionalData>
							<name>
								<literal>metadataFile</literal>
							</name>
						</stepAdditionalData>
					</value>
				</addNode>
			</rules>
		</usePath>
	</rule>
	<rule active="0" description="This rule is deactivated, so shouldn't be executed">
		<returnMessage description="Return an error message if this rule is reached">
			<type>error</type>
			<msgId>1000113</msgId>
		</returnMessage>
	</rule>
	<rule description="This rule demonstrates the ability to stop processing rules at any stage">
		<stopProcessing>
			<return>continue</return>
		</stopProcessing>
	</rule>
	<rule description="This rule shouldn't be executed as it is after the stop processing instruction">
		<returnMessage description="Return an error message if this rule is reached">
			<type>error</type>
			<msgId>1000113</msgId>
		</returnMessage>
	</rule>
</rules>
