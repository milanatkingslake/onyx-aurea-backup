<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:timeEstimate="0" MadCap:priority="0" MadCap:status="In Progress" MadCap:lastBlockDepth="6" MadCap:lastHeight="806" MadCap:lastWidth="624">
    <head>
        <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <head><title>Variables</title>
            <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
        </head>
        <h4>Variables</h4>
        <p>In scripts, variables store data for the following 
 purposes:</p>
        <ul>
            <li>Text merging in headers, footers, and prompts</li>
            <li>Evaluating the condition statement in rules</li>
            <li>Populating list prompts (list boxes, drop-down 
list boxes, and radio button sets) from method calls</li>
            <li>Setting the default value for a prompt</li>
            <li>Providing input data to a method call</li>
        </ul>
        <p>Scripts use three kinds of variables:</p>
        <ul>
            <li>Scalar variables are variables that contain single 
 values obtained from user responses to prompts, such as the answer to 
 "What is your age?" or from method calls.</li>
        </ul>
        <p class="Indent1">Scalar variables provide data for text merging, for evaluating rules, 
 for default prompt response values, and as input data for method calls.</p>
        <ul>
            <li>List variables are variables that store values 
 obtained from lists generated by method calls. For example, the “countryName” 
variable could contain a list generated by the country.retrieveList method 
call.</li>
        </ul>
        <p class="Indent1">List variables are used only for populating list prompts (list box, 
 drop-down list box, radio button set, or check box set prompts). Do not 
 use them as inputs in method calls, in rule evaluation, or in text merging. </p>
        <ul>
            <li>Context variables are pre-defined scalar variables 
 that store the information described in the following table.</li>
        </ul>
        <p class="Indent1">You can use a context variable in merged text (for example, displaying 
 the company name if the owner is a company), as a parameter to a method 
 call (for example, retrieving existing customer information), or to provide 
 data for evaluating rules.</p>
        <p class="Indent1">The following table lists context variables, their code, and their 
text.</p>
        <table style="width: 100%;">
            <col />
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th>Variable name </th>
                    <th>Code </th>
                    <th>Text </th>
                    <th>Owner types </th>
                </tr>
            </thead>
            <tbody>
                <tr style="background-color: #ffffff;text-align: left;" bgcolor="#ffffff" align="left">
                    <td>
                        <p class="Table_Text" style="color: #000000;">_OWNERTYPE </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">1, 2, or 6, depending on owner </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">“Individual”, “Company”, or “Incident”, depending on owner (localizable)</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">All </p>
                    </td>
                </tr>
                <tr style="background-color: #ffffff;text-align: left;" bgcolor="#ffffff" align="left">
                    <td>
                        <p class="Table_Text" style="color: #000000;">_OWNERID </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Owner primaryId </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Owner secondaryId</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">All </p>
                    </td>
                </tr>
                <tr style="background-color: #ffffff;text-align: left;" bgcolor="#ffffff" align="left">
                    <td>
                        <p class="Table_Text" style="color: #000000;">_OWNERNAME </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Owner’s name </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Owner’s name</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">All </p>
                    </td>
                </tr>
                <tr style="background-color: #ffffff;text-align: left;" bgcolor="#ffffff" align="left">
                    <td>
                        <p class="Table_Text" style="color: #000000;">_USERID </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">End-user’s Id </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">End-user’s name</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">All </p>
                    </td>
                </tr>
                <tr style="background-color: #ffffff;text-align: left;" bgcolor="#ffffff" align="left">
                    <td>
                        <p class="Table_Text" style="color: #000000;">_INCIDENTCATEGORY </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Incident category code </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">“Sales”, “Service”, “Support” (localizable)
 </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Incidents </p>
                    </td>
                </tr>
                <tr style="background-color: #ffffff;text-align: left;" bgcolor="#ffffff" align="left">
                    <td>
                        <p class="Table_Text" style="color: #000000;">_CUSTOMER</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">primaryId of the incident’s primary contact 
 </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Name of the incident’s primary contact
 </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Incidents </p>
                    </td>
                </tr>
                <tr style="background-color: #ffffff;text-align: left;" bgcolor="#ffffff" align="left">
                    <td>
                        <p class="Table_Text">NextScriptId</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Reference ID of the next script.<br />[Refers to the  Value(s) stored].</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Applies to script chaining</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">All </p>
                    </td>
                </tr>
                <tr style="background-color: #ffffff;text-align: left;" bgcolor="#ffffff" align="left">
                    <td>
                        <p class="Table_Text" style="color: #000000;">NextScriptVariables</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Specified variables.
[Refers to the  Value(s) stored].   </p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">Applies to script chaining</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="color: #000000;">All </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Indent1">The scope of variables can be either step-local or 
global:</p>
        <ul>
            <li>Step-local variables are associated with a specific 
step. They appear in the list of variables only for that step. The value 
 of a step-local variable is lost when the user moves to the next step. 
 This is usually desirable for list variables, but not for scalar variables.</li>
            <li>Global variables are not associated with a step
. They appear in the list of variables in every step. The value of a global 
 variable is retained until a user’s subsequent response or method call 
 changes it.</li>
        </ul>
        <p class="ListNote" MadCap:autonum="&lt;b&gt;Note:&lt;/b&gt; &#160;">The scope of script variables is not exactly parallel 
 to traditional programming scope. In a particular script, multiple variables 
 can not have the same name even if their scope differs.</p>
        <p>Variables have two parts: the code portion and the 
 text portion. The code and text portions typically both represent the 
 same entity, which is stored in the variable. </p>
        <ul>
            <li>Variable code is the identifier of the variable. 
 </li>
        </ul>
        <p class="Indent1">The variable code can not be changed, so is more likely than the 
 variable text to be used in rules.</p>
        <p class="Indent1">The variable code does not include the dollar sign: {variablename}. </p>
        <ul>
            <li>Variable text is the descriptive portion of the 
 variable.</li>
        </ul>
        <p class="Indent1">The variable text is more likely to change than the variable code 
 to be displayed to the user.</p>
        <p class="Indent1">The variable text has a dollar sign ($) appended, as in {variabletext$}. 
 You can make the variable text more descriptive and thus more appropriate 
 for use in text merging in headers, footers and prompts.</p>
        <p>For example:</p>
        <ul>
            <li>The variable code {WA} could be used in a rule 
 and the more user-friendly variable text {Washington$} in text merging 
 in a header, prompt text, or footer.</li>
            <li>The variable code {yes} could be used in a rule 
 and the localized variable text {Si$} in text merging.</li>
        </ul>
        <p>For more information on using variables to merge data in headers or footers, see the Help for Script Designer.</p>
    </body>
</html>