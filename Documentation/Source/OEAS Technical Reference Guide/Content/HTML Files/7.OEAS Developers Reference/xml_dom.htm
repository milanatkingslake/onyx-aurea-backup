<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:check_list="Ran Smart Index" MadCap:timeEstimate="0" MadCap:priority="0" MadCap:status="In Progress" MadCap:ignoredWords="DOMDocuments" MadCap:lastBlockDepth="6" MadCap:lastHeight="794" MadCap:lastWidth="624">
    <head>
        <link href="../../Resources/TableStyles/Aptean_Table_1.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <head><title>Microsoft XML DOM</title>
            <!-- hide from JavaScript-challenged browsers 

function openWindow(url) { 
  popupWin = window.open(url, 'secondary', 'resizable,dependent,width=700,height=475,left=10,top=19') 
} 

// done hiding -->
            <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
        </head>
        <h4>
            <MadCap:keyword term="Microsoft XML DOM" />Microsoft XML DOM in OEAS</h4>
        <p>When you develop a custom component for OEAS, you make use of the Microsoft 
 XML DOM. Your development environment for the Onyx Enterprise Application 
 Server requires a specific version of the Microsoft XML Parser to ensure 
 that all components work with one another successfully. For information 
 on which version(s) of the Microsoft XML Parser are supported by OEAS, 
 consult the <span style="font-style: italic;">OEAS Readme</span>.</p>
        <p>All OEAS step components, including your custom step components, must 
 implement the IStep interface, which includes a pointer to IXMLDOMDocument 
 interface in the parameters of the Execute method. The Onyx Transaction 
 Manager (OTM) passes this pointer to your component.</p>
        <p>If you attempt to append a child node created in a different process 
 than the process in which the OTM XML DOM was created, you may get intermittent 
 errors with your component. The problem occurs when you attempt to use 
 an XML DOM interface in a different execution context than the one in 
 which it was created. This is a known issue and is documented in the Microsoft 
 Knowledge Base under the following articles.</p>
        <table>
            <col />
            <col />
            <thead>
                <tr>
                    <th>Search String(http://search.microsoft.com/us/SearchMS25.asp)</th>
                    <th>Knowledge Base</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">Q259004</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">PRB: Cannot Use XML Interfaces 
 Remotely</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">Q251246</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">PRB: XML DOMDocuments Created 
 in Separate Processes Cannot Be Combined</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>If you want to append new XML nodes to the XML DOM passed by the OTM, 
 you should use the OTM node to manually create a copy of the new node.</p>
        <h5>Example</h5>
        <p>If oOTMNode and oChildNode were created in different processes, you 
 may get intermittent errors using the IXMLDOMNode appendChild method.</p>
        <p Class="Code" class="code">Public&#160;Function&#160;AppendChildNode(ByRef&#160;oOTMNode&#160;As&#160;IXMLDOMNode,&#160;_</p>
        <p Class="Code" class="code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ByRef&#160;oChildNode&#160;As&#160;IXMLDOMNode)&#160;As&#160;Boolean</p>
        <p Class="Code" class="code">&#160;</p>
        <p Class="Code" class="code"><span style="color: #008000;">'The following may fail if oOTMNode and oChildNode were</span>
        </p>
        <p Class="Code" class="code"><span style="color: #008000;">'created in different execution processes.</span>
        </p>
        <p Class="Code" class="code">&#160;&#160;&#160;&#160;&#160;oOTMNode.appendChild&#160;oChildNode</p>
        <p Class="Code" class="code">&#160;&#160;&#160;&#160;&#160;AppendChildNode&#160;=&#160;True</p>
        <p Class="Code" class="code">End&#160;Function&#160;</p>
        <p>To circumvent this, check to see if oOTMNode and oChildNode belong to 
 the same DOM document by checking their ownerDocument property. If they 
 do, the previous code should work. Otherwise, use the oOTMNode to create 
 a new element as in the following code.</p>
        <p Class="Code" class="code"><span style="color: #008000;">' Create the new node</span>
        </p>
        <p Class="Code" class="code">&#160;&#160;&#160;&#160;&#160;Set&#160;oNewNode&#160;=&#160;OTMNode.ownerDocument.createElement(oChildNode.nodeName)</p>
        <p class="code" style="margin-bottom: 0;">&#160;&#160;&#160;&#160;&#160;OTMNode.appendChild&#160;oNewNode</p>
    </body>
</html>