<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:check_list="Ran Smart Index" MadCap:timeEstimate="0" MadCap:priority="0" MadCap:status="In Progress" MadCap:lastBlockDepth="2" MadCap:lastHeight="2430" MadCap:lastWidth="702">
    <head>
        <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <head><title>execute (IStep)</title>
            <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
        </head>
        <h5>
            <MadCap:keyword term="execute" />Execute</h5>
        <p>
            <MadCap:keyword term="IStep" />The Execute method of the IStepString interface is called by the Onyx 
 Transaction Manager (OTM) to execute a .NET step component.</p>
        <h3>Syntax</h3>
        <p><b>IDL</b>
        </p>
        <p Class="Code" class="code">HRESULT Execute(</p>
        <p Class="Code" class="code">[in] BSTR ApplicationName,</p>
        <p Class="Code" class="code">[in] BSTR LogicalObjectName,</p>
        <p Class="Code" class="code">[in] BSTR LogicalMethodName,</p>
        <p Class="Code" class="code">[in] BSTR StepAdditionalData,</p>
        <p Class="Code" class="code">[in, out] BSTR* sStepPackageXmlString,</p>
        <p Class="Code" class="code">[out, retval] BSTR* StepResult);</p>
        <p><span onclick="drop('text0')"><em class="dropspot" style="font-style: italic;">IDL parameter descriptions</em></span>
        </p>
        <p>ApplicationName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the current application in 
 use.</p>
        <p>ApplicationName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the current application in 
 use.</p>
        <p>LogicalObjectName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the business object that 
 contains the called method.</p>
        <p>LogicalMethodName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the business object method 
 that contains this step.</p>
        <p>StepAdditionalData</p>
        <p class="BodyTextIndent_1">[in] A string that contains any special non-XML data intended 
 for the step component.</p>
        <p>sStepPackageXmlString</p>
        <p class="BodyTextIndent_1">[in, out] A XML string that contains the data sent by the 
 client.</p>
        <p>StepResult</p>
        <p class="BodyTextIndent_1">[out, retval] A message to the OTM indicating whether the 
 remaining steps in the method should be executed.Type your drop-down text 
 here.</p>
        <p>ApplicationName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the current application in 
 use.</p>
        <p>LogicalObjectName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the business object that 
 contains the called method.</p>
        <p>LogicalMethodName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the business object method 
 that contains this step.</p>
        <p>StepAdditionalData</p>
        <p class="BodyTextIndent_1">[in] A string that contains any special non-XML data intended 
 for the step component.</p>
        <p>sStepPackageXmlString</p>
        <p class="BodyTextIndent_1">[in, out] A XML string that contains the data sent by the 
 client.</p>
        <p>StepResult</p>
        <p class="BodyTextIndent_1">[out, retval] A message to the OTM indicating whether the 
 remaining steps in the method should be executed.</p>
        <p><b>C#</b>
        </p>
        <p Class="Code" class="code">public string Execute(</p>
        <p Class="Code" class="code">string ApplicationName,</p>
        <p Class="Code" class="code">string LogicalObjectName,</p>
        <p Class="Code" class="code">string LogicalMethodName,</p>
        <p Class="Code" class="code">string StepAdditionalData,</p>
        <p Class="Code" class="code">ref string XMLString)</p>
        <p><span onclick="drop('text1')"><em class="dropspot" style="font-style: italic;">View C# parameter descriptions</em></span>
        </p>
        <p>ApplicationName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the current application in 
 use.</p>
        <p>LogicalObjectName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the business object that 
 contains the called method.</p>
        <p>LogicalMethodName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the business object method 
 that contains this step.</p>
        <p>StepAdditionalData</p>
        <p class="BodyTextIndent_1">[in] A string that contains any special non-XML data intended 
 for the step component.</p>
        <p>XMLString</p>
        <p class="BodyTextIndent_1">[ref] A XML string that contains the data sent by the client.</p>
        <p>ApplicationName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the current application in 
 use.</p>
        <p>LogicalObjectName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the business object that 
 contains the called method.</p>
        <p>LogicalMethodName</p>
        <p class="BodyTextIndent_1">[in] A string that identifies the business object method 
 that contains this step.</p>
        <p>StepAdditionalData</p>
        <p class="BodyTextIndent_1">[in] A string that contains any special non-XML data intended 
 for the step component.</p>
        <p>XMLString</p>
        <p class="BodyTextIndent_1">[ref] A XML string that contains the data sent by the client.</p>
        <h3>Remarks</h3>
        <p>Onyx recommends that your .NET step components implement the IStepString 
 Execute method instead of the IStep Execute method. With IStepString the 
 XML that a .NET step component receives from the OTM is a string. When 
 developing .Net step components, Onyx recommends using the .Net Framework 
 System.XML assembly for parsing the XML string. The .Net Framework does 
 not support using the MSXML parser. For more information, see the Microsoft 
 KB815112 article. When a .NET step component finishes processing the XML, 
 it serializes the XML into a string and returns it to the OTM. The OTM 
 then loads the string back into an IXMLDOMDocument and continues processing.</p>
        <p>The preferred way to interact with Onyx Enterprise Application Server 
 components when building a .NET step component is to use the Onyx-signed 
 <a href="Primary_interop_assembly.htm">primary interop assemblies</a>.</p>
        <p>The return value for this method is a single string that contains the 
 text "stop" or "continue." The OTM uses this string 
 to determine whether to continue processing the remaining steps in the 
 method.</p>
        <p>The contents of the StepAdditionalData parameter are stored in the Onyx 
 Enterprise Dictionary (OED) and can be modified using the Object Designer.</p>
        <p>For more information about what to expect from the OTM and what to pass 
 back, see <a href="Calling_the_OTM.htm">Calling_the_OTM</a> and <a href="Build_Stp_Comp.htm">Building 
 Step Components</a>. </p>
    </body>
</html>