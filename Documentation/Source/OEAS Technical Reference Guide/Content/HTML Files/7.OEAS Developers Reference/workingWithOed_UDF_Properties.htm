<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:check_list="Ran Smart Index" MadCap:timeEstimate="0" MadCap:priority="0" MadCap:status="In Progress" MadCap:lastBlockDepth="2" MadCap:lastHeight="433" MadCap:lastWidth="1020" MadCap:ignoredWords="Consona">
    <head>
        <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <head><title>UDF Properties</title>
            <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
        </head>
        <h6>
            <MadCap:keyword term="Properties;UDF Properties" />UDF properties</h6>
        <p>
            <MadCap:keyword term="property creation:user-defined fields" />
            <MadCap:keyword term="user-defined fields" />OEAS supplies numerous user-defined fields (UDFs), such as the user1-userN 
 properties, on various business objects. UDF properties map to predefined 
 vchUser columns in the OEDB.</p>
        <p>The advantage of implementing UDFs is that much of the work is already 
 done for you: the columns already exist in the OEDB, the properties already 
 exist in the OED, and you can easily display it on the OEP user interface. 
 (Using OES Reference Table Administration, you activate the UDFs for display 
 in OEP. Then, using UCW, you can place the UDF in the desired location 
 on the OEP UI.).</p>
        <p>The disadvantage of implementing UDFs, however, is that the fields are 
 not “strongly typed,” meaning that all UDF columns use a generic data 
 type, either string or nvarchar, regardless of the type of data you are 
 storing in that field.</p>
        <p>For some Onyx implementations, the generic data types of UDFs may be 
 perfectly acceptable. If you want to capture data that is important to 
 your reporting services, however, then you should instead create custom 
 properties that are "strongly typed" (that is, properties that 
 map to columns that precisely define the type of data that is being captured). 
 Using strongly typed fields also makes your database easier to maintain, 
 improves referential integrity, and facilitates future customizations.</p>
        <p>Still, UDFs are a good option for check box controls, masked controls, 
 and hierarchically related controls, primarily because UCW does not currently 
 offer those controls in its toolbox. Using existing UDFs is faster and 
 easier than creating these controls on your own.</p>
        <p>For additional details about setting up UDFs and creating custom fields 
 in OEP, see <i>Customize OEP</i>.</p>
    </body>
</html>