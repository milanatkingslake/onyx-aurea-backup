<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:check_list="Ran Smart Index" MadCap:timeEstimate="0" MadCap:priority="0" MadCap:status="In Progress" MadCap:lastBlockDepth="6" MadCap:lastHeight="776" MadCap:lastWidth="624">
    <head>
        <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <head><title>Stored Procedure Parameters</title>
            <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
        </head>
        <h4>
            <MadCap:keyword term="data limitations" />
            <MadCap:keyword term="parameters" />
            <MadCap:keyword term="procedure" />
            <MadCap:keyword term="Stored procedure parameters" />
            <MadCap:keyword term="Stored" />Stored procedure parameters</h4>
        <p>Parameters for stored procedures called through the Query Engine must 
 be submitted within a two-dimensional Variant array. Both methods of the 
 <a href="QEInterface.htm">IEBusQE</a> interface that execute stored procedures, 
 <a href="QE_CallStorProc_Meth.htm">CallStoredProcedure</a> and <a href="QE_CSPREI_Meth.htm">CallStoredProcedureReturnExtendedInfo</a>, 
 use the values in this array for the call to the database.</p>
        <p>The Query Engine does not verify the existence of the stored procedure 
 or validate the number and order of the parameters before sending the 
 call to the database for execution. Any resulting syntax errors generated 
 by a relational database are passed back through the CallStoredProcedure 
 and CallStoredProcedureReturnExtendedInfo methods on return.</p>
        <p>Each row in the parameter array contains four values. The first three 
 describe the parameter, and the last one contains the value. The Query 
 Engine uses the descriptive data to prepare the parameter for the stored 
 procedure call.</p>
        <table>
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th>Column</th>
                    <th>Item</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <p class="Table_Text" style="text-align: left;margin-bottom: 0;" align="left">0</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">Data type</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">One of the data types defined by the <a href="QE_epType.htm">epType</a> 
 enumeration. The value identifies the intended data type for the parameter.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p class="Table_Text" style="text-align: left;margin-bottom: 0;" align="left">1</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">Size</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">Used only for string parameters. This number 
 indicates the maximum size of the parameter string in characters (not 
 bytes).</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p class="Table_Text" style="text-align: left;margin-bottom: 0;" align="left">2</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">Direction</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">A value from the <a href="QE_Enum_epDirection.htm">epDirection</a> 
 enumeration that indicates whether the parameter is used for input, output, 
 or both.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p class="Table_Text" style="text-align: left;margin-bottom: 0;" align="left">3</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">Value</p>
                    </td>
                    <td>
                        <p class="Table_Text" style="margin-bottom: 0;">The data for the parameter. Unless the parameter 
 represents a date, submit this value as a Variant with a subtype of VT_BSTR 
 (Visual Basic String). The Query Engine will convert it to the data type 
 identified in column 0. If the value represents a date, submit it as a 
 Variant with a subtype of VT_DATE.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>The first element in the parameter array is reserved for the return 
 code of the stored procedure. Even if the stored procedure does not explicitly 
 generate a return code, or if it has no parameters, you must include an 
 array with a single element to store this value. The array must be two-dimensional. 
 To create a one-element array, use zero for the size of the second dimension.</p>
        <p class="Important" MadCap:autonum="&lt;b&gt;Important:&lt;/b&gt; &#160;">To create the parameters array properly in Visual Basic, 
 use the ReDim command to set the number of dimensions. Setting the dimensions 
 when the array is declared results in an error when the method is used. 
 The code sample in each method topic shows how to initialize the array.</p>
        <p>Output-only parameters must be passed in with a value of null.</p>
        <p>Set the size for a string parameter equal to the size specified in the 
 stored procedure definition. Using a value that is too small may result 
 in truncation of the string on input or output.</p>
        <p>In some cases, the data within input-only parameters may change after 
 the stored procedure executes. Step components should not use the values 
 of input-only parameters after the stored procedure method completes.</p>
        <p>The Query Engine checks integer values to verify that they fall within 
 valid data ranges before stored procedure execution. It does not check 
 the values of other numeric data types.</p>
    </body>
</html>