<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:timeEstimate="0" MadCap:priority="0" MadCap:status="In Progress" MadCap:lastBlockDepth="4" MadCap:lastHeight="763" MadCap:lastWidth="624">
    <head>
        <link href="../../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <head><title>Key Aspects of OEAS</title>
            <link href="../../Resources/Stylesheets/ApteanOLH.css" rel="stylesheet" type="text/css" />
        </head>
        <h2>Key Aspects of OEAS </h2>
        <p>OEAS is extremely flexible, providing many customization 
 and integration opportunities. Consider the following key aspects of OEAS: 
 </p>
        <ul>
            <li>OEAS is a middle-tier application, which offers 
 many benefits. One key benefit is that much of the business logic is extracted 
 from the presentation and data services tiers into a single tier called 
 the business logic tier. This is important because it enables you to customize 
 the application logic of OEAS in the application server without 
requiring you to update the many disparate client applications 
 used throughout your organization. In fact, unless you make substantial 
 customizations, you do not need to customize either the data services 
 or presentation tiers—though the OEAS tools can facilitate portions of 
 this process, too.</li>
            <li>OEAS supports addition of a customer's business 
 logic to the application using Onyx Enterprise Dictionary. The object 
 definitions, which define how UI client requests are processed, are constructed 
 by the Onyx Transaction Manager as needed, based on the information stored 
 in the Onyx Enterprise Dictionary. Unlike most systems, whose object definitions 
 are compiled and therefore difficult to change, OEAS defines business 
 objects with metadata. Furthermore, OEAS divides each method into one 
 or more steps, thereby enabling you to more easily modify these methods 
 to suit your business needs.</li>
            <li>All of the OEAS business objects are defined in 
 the Onyx Enterprise Dictionary (OED). OEAS uses these definitions to understand 
 how to process a client request. Using a design tool called the Object 
 Designer, you can modify these definitions and thereby modify how a client 
 request is processed. The OED defines, in addition to other things, the 
 series of steps that must be executed in order to complete a method. Because 
 these steps do not implement business logic (they provide a reference 
 to a corresponding step component), and because these steps do not necessarily 
 rely on one another, you can easily modify the way in which a method behaves 
 by adding new steps, removing existing steps, or changing the order in 
 which the steps are called.</li>
            <li>Although OEAS uses XML to define the series of 
 steps that is called for each object.method, the implementation business 
 logic resides in OEAS step components and database stored procedures. 
 Step components are pre-compiled COM+ components designed to perform a 
 certain set of tasks. OEAS supports use of custom step components and 
 database procedures.</li>
            <li>OEAS makes extensive use of XML, especially as 
 a data format both within OEAS and between OEAS and client applications. 
 You can integrate any COM-aware client application with OEAS, as long 
 as you use XML as your data format. By creating a custom step component, 
 you can integrate OEAS with other enterprise applications using almost 
 any available technology.</li>
            <li>OEAS runs as a COM+ application and is comprised 
 of numerous COM+ components. As such, OEAS gains the benefits of the COM+ 
 and DCOM (distributed component object model) application environment. </li>
        </ul>
    </body>
</html>